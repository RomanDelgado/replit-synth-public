import numpy as np
import sounddevice as sd
import pygame.midi
from scipy.signal import butter, lfilter
from threading import Lock

# Audio Configuration
SAMPLE_RATE = 44100  # Samples per second
BUFFER_SIZE = 2048  # Increased buffer size for smoother playback

# MIDI Setup
pygame.midi.init()

def list_midi_devices():
    print("Available MIDI devices:")
    for i in range(pygame.midi.get_count()):
        device_info = pygame.midi.get_device_info(i)
        print(f"Device {i}: {device_info}")
list_midi_devices()

device_id = 1  # Replace with the correct device ID from the list above
try:
    midi_input = pygame.midi.Input(device_id)
    print(f"Successfully opened MIDI input device {device_id}.")
except pygame.midi.MidiException as e:
    print(f"Failed to open MIDI input device {device_id}: {e}")
    pygame.midi.quit()
    exit()

# Default Synth Settings
base_frequency = 440  # Default frequency (A4)
weights = [0.25, 0.25, 0.25, 0.25]  # Waveform weights for Sine, Saw, Triangle, Pulse
adsr_values = [0.1, 0.1, 0.8, 0.1]  # Attack, Decay, Sustain, Release (default values)
filter_cutoff = 1000  # Default cutoff frequency for the low-pass filter
filter_resonance = 0.7  # Default resonance for the low-pass filter
detune_values = [0.0, 0.0, 0.0, 0.0]  # Detune values for Sine, Saw, Triangle, Pulse

# Waveform Generators
def generate_sine(frequency, sample_rate, duration):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    return np.sin(2 * np.pi * frequency * t)

def generate_sawtooth(frequency, sample_rate, duration):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    return 2 * (t * frequency - np.floor(t * frequency + 0.5))

def generate_triangle(frequency, sample_rate, duration):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    return 2 * np.abs(2 * (t * frequency - np.floor(t * frequency + 0.5))) - 1

def generate_pulse(frequency, sample_rate, duration, duty_cycle=0.5):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    return np.where((t * frequency) % 1 < duty_cycle, 1.0, -1.0)

def morph_waveforms(waveforms, weights):
    normalized_weights = np.array(weights) / sum(weights)
    combined_wave = sum(w * waveform for w, waveform in zip(normalized_weights, waveforms))
    return combined_wave

def apply_adsr(wave, adsr, sample_rate):
    attack, decay, sustain, release = adsr
    total_samples = len(wave)

    attack_samples = int(attack * sample_rate)
    decay_samples = int(decay * sample_rate)
    release_samples = int(release * sample_rate)

    sustain_samples = max(0, total_samples - (attack_samples + decay_samples + release_samples))

    env = np.zeros(total_samples)

    if attack_samples > 0:
        env[:attack_samples] = np.linspace(0, 1, attack_samples)
    if decay_samples > 0:
        env[attack_samples:attack_samples + decay_samples] = np.linspace(1, sustain, decay_samples)
    if sustain_samples > 0:
        env[attack_samples + decay_samples:attack_samples + decay_samples + sustain_samples] = sustain
    if release_samples > 0:
        env[-release_samples:] = np.linspace(sustain, 0, release_samples)

    return wave * env

def midi_to_frequency(midi_note):
    return 440 * (2 ** ((midi_note - 69) / 12))

def low_pass_filter(signal, cutoff, resonance, sample_rate):
    nyquist = sample_rate / 2
    normalized_cutoff = cutoff / nyquist
    b, a = butter(2, normalized_cutoff, btype='low', analog=False)
    return lfilter(b, a, signal)

# Start Audio Stream
stream = None

try:
    print("Starting synth. Play notes on your MIDI keyboard. Press Ctrl+C to stop.")
    while True:
        while midi_input.poll():
            midi_events = midi_input.read(10)
            for event in midi_events:
                data, timestamp = event
                status, note_or_cc, value, _ = data

                if status == 144 and value > 0:  # Note On
                    frequency = midi_to_frequency(note_or_cc)
                    duration = 1.0  # Default duration of 1 second for prototyping

                    sine_wave = generate_sine(frequency + detune_values[0], SAMPLE_RATE, duration)
                    saw_wave = generate_sawtooth(frequency + detune_values[1], SAMPLE_RATE, duration)
                    triangle_wave = generate_triangle(frequency + detune_values[2], SAMPLE_RATE, duration)
                    pulse_wave = generate_pulse(frequency + detune_values[3], SAMPLE_RATE, duration)

                    combined_wave = morph_waveforms(
                        [sine_wave, saw_wave, triangle_wave, pulse_wave], weights
                    )
                    adsr_wave = apply_adsr(combined_wave, adsr_values, SAMPLE_RATE)

                    filtered_wave = low_pass_filter(adsr_wave, filter_cutoff, filter_resonance, SAMPLE_RATE)

                    sd.play(filtered_wave, samplerate=SAMPLE_RATE)
                    sd.wait()
                    print(f"Note on: {note_or_cc}, Frequency: {frequency} Hz")

                elif status == 128 or (status == 144 and value == 0):  # Note Off
                    print(f"Note off: {note_or_cc}")

                elif status == 176:  # Control Change
                    if note_or_cc in [14, 15, 16, 17]:
                        adsr_index = note_or_cc - 14
                        adsr_values[adsr_index] = value / 127.0
                        print(f"ADSR updated: {['Attack', 'Decay', 'Sustain', 'Release'][adsr_index]} = {adsr_values[adsr_index]:.2f}")
                    elif note_or_cc in [18, 19, 20, 21]:
                        morph_index = note_or_cc - 18
                        weights[morph_index] = value / 127.0
                        print(f"Waveform weight updated: {['Sine', 'Saw', 'Triangle', 'Pulse'][morph_index]} = {weights[morph_index]:.2f}")
                    elif note_or_cc == 22:  # Filter Cutoff
                        filter_cutoff = max(20, min(value / 127.0 * SAMPLE_RATE / 2, SAMPLE_RATE / 2))  # Limit cutoff
                        print(f"Filter cutoff updated: {filter_cutoff:.2f} Hz")
                    elif note_or_cc == 23:  # Filter Resonance
                        filter_resonance = value / 127.0
                        print(f"Filter resonance updated: {filter_resonance:.2f}")
                    elif note_or_cc in [26, 27, 28, 29]:  # Detune
                        detune_index = note_or_cc - 26
                        detune_values[detune_index] = (value / 127.0 - 0.5) * 2  # Map to +/- 1 semitone
                        print(f"Detune updated: {['Sine', 'Saw', 'Triangle', 'Pulse'][detune_index]} = {detune_values[detune_index]:.2f}")
except KeyboardInterrupt:
    print("Exiting synth.")
finally:
    if stream:
        stream.stop()
        stream.close()
    midi_input.close()
    pygame.midi.quit()
